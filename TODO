THOU SHALT ALWAYS REFER TO GROUPS AS FGROUPS IN THE SOURCE CODE
THOU SHALT ALWAYS END SQL FRAGMENTS WITH A SPACE WHEN YOU INTEND TO ASSEMBLE THEM INTO ONE QUERY
THOU SHALT USE $this->getCsrf() AND $this->checkCsrf() AND $this->requireLogin() AS APPROPRIATE
THOU SHALT MAKE SURE p.deleted = 0 BEFORE SHOWING A POST

*: already done. ?: not really tested yet. Otherwise: not done.

TODO:

? Get a decent name (Plog?)

Implement friend group editing & managing of membership in groups
Pagination for reader (public and private)
Support reading RSS feeds as well as plog feeds
Put rich text editor menu items in a reasonable order (how do I do this with jWYSIWYG?)
Address i18n issues (the slugifier is too harsh)
Comments (friends only)
Comments (public, some kind of akismet integration)
Avatars
Other pictures
Tagging of posts
Browsing by tag
Filtering of the above (might use aHtml::simplify from Apostrophe so your "friends" can't phish you)
"Short" and "full" feed modes (tweetlike titles with "More" buttons vs. full posts)
Photo albums
Custom stylesheets should be loaded in addition to main.css, not in place of it. Overrides are more maintainable

* Rich text editing
* Safe filtering of rich text HTML (see the HtmlSimplify class)
* Implement editing existing posts
* Test your fix for restoring the privacy setting on edit
* Implement preserving the original slug on edit
* Test the logic that updates and deletes remotely
* Also, throw in 'delete post' since it's free once that stuff works 
* CSRF protection
* Near-realtime delivery
* Implement "accept friend request"
* Implement removing friends
* Push posts to friends as appropriate
* Implement security (owner can post, see private posts, etc. - public only sees public feed)
* RSS feed (outgoing, of public posts only)

NOTES

Comments are a pretty problem.

If Joe posts, and Jane and Jill are friends with Joe but not with each other, how do they see each other's comments (assuming that is what Jane intends when she comments)?

We could say that comments are sent by the commenter to all mutual friends only, via established secrets. But this precludes a major means of discovering the plogs of friends. Realistically it will be very hard for everyone to connect exclusively outside of plogspace. And conversations are very incoherent this way, with Joe making reference to Jane's comments Jill can't see.

Joe could rebroadcast comments. This is effective, but there is no way for Jane to verify that Jill really said something.

One approach: Jane md5's Jill's comment, including path information (the URL of Joe's plog, the slug of Joe's post, the URL of Jane's plog) and the content of the post. Jane then queries Jill's plog: "hey, did you really say this?" Jill's plog keeps the md5 of each comment made, so it is able to verify or deny. However a "no" result only tells Jane that *somebody* is full of shit. Her friend Joe could be bull of shit, or Jill's plog could be lying about the verification result. 

Jane has little reason to trust Jill (whose identity is uncertain) over Joe (already confirmed as a plog friend), so she's going to shrug and say "WTF?"

Plog comments could be signed with public/private key encryption, but this doesn't do us much good unless we are already friends with the parties involved (a useful case to be sure...) or there is some central certificate authority. The latter is something we are trying hard to avoid.

When we are friends with Joe we trust the veracity of what he says on his own behalf. Why would we not trust the veracity of what he claims others have said? He could just as easily quote something they supposedly said to him on the phone. It comes down to the real-friend relationship. If we trust Joe, we trust Joe. If we don't, we unfriend him. This problem always exists when commenting on somebody's public blog (it's not a new problem for Wordpress for instance although it does not exist in the context of LJ or Facebook in the same way).

There should probably be a short note to the effect that "as with any blog, the authenticity of comments can't be guaranteed. If you trust Joe, then you may trust these comments to be genuine to the best of Joe's knowledge" (ugh, that should probably pop up if you actually click a "security note" button).

So comments should be sent to the original poster (OP), and rebroadcast by the OP as appropriate. If they are not anonymous then the possibility of contacting the third party directly and establishing a friendship exists. There should be some kind of "heya, this is so and so, my plog is here, you could call me to confirm" functionality. Not that Facebook confirms anybody's identity either (Twitter has the option). Nor does LiveJournal. 

It has always been possible to generate fakity-fake friends. You work through friends you trust. You do not build huge webs of secrets between people you don't know.

It's a good idea to use direct delivery for comments by mutual friends, however the performance issues are kind of grim. To be exhaustively sure you'd have to query all of your mutual friends about every post you look at, and you can't even see Joe's friendslist (something to think about). Basing this on trust in the OP is probably the only way forward without a CA.

* * *

A better way:

The OP (Original Poster) writes a post.

A clicks for comments (apiGetComments) and receives two things from the OP:

1. A "comment secret" (CS) for the post;
2. A list of "comments," in chronological order but not containing the actual text. Instead a "comment" is just a plog address and a remote ID for that comment.

A then calls out to the commenters' plogs to pull the comments from them in real time (there has to be pagination obviously). A pulls comments from B, C and D using the CS to authenticate instead of a shared secret. A sends the comment remote ID.

apiGetComments would support pagination directly for simplicity.

Benefits:

The OP cannot forge comments (they can reorder or remove them, but that's all).

B, C and D don't have to send the same comment text to A and E, which is bad. However, since the CS is being used rather than a shared secret, B, C and D cannot distinguish for certain between A and E. So it is not safe to say one thing to Peter and another thing to Paul. That means it is unlikely this will be exploited. (In practice one could sometimes make this determination by static IP address, but IP addresses are shared often enough to make that a risky practice.) Anyway there are easier ways to be two-faced (just privately contact both people and say different things).

If the OP changes post security, a new CS must be distributed. Comments made by those lacking the necessary privileges would effectively vanish at this point. I think that's acceptable.

There is still a question of knowing that comments exist. It probably makes sense to do an asynchronous apiGetComments when displaying a post that has comments. That could be locally cached for a little while.

When you post a comment you are just creating a post of your own that specifies another post (as its parent). <-- or do we simplify comments, avoid nesting, and not allow them to be fully rich monstrosities? I like simple comments better because they discourage overuse of the comment system - plogging doesn't work as well if it digresses infinitely into comment threads. Better to make a new post if you have something big to say.

